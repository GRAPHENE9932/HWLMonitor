#
# This Python script reads the PNG files in provided folder, extracts pixel data
# and creates one C header file which contains a uint8_t array for each image.
#
# The name of each particular array is constructed as follows:
# <file name without extension>_IMG
# The pixel data is stored in 1-bit monochrome format, compatible with
# HWLMonitor's display.
#

from argparse import ArgumentParser, RawDescriptionHelpFormatter
from PIL import Image
import os

def image_to_bytes(image):
    width, height = image.size
    result = [0] * (width * ((height + 7) // 8))

    for byte_i in range(len(result)):
        x_pos = byte_i % width
        y_pos = byte_i // width * 8

        for bit in range(8):
            cur_pixel = image.getpixel((x_pos, y_pos + bit))
            if cur_pixel:
                result[byte_i] |= (1 << bit)
    
    return [width, (height + 7) // 8] + result

def hex_1_byte(n):
    return f"0x{n:02X}"

def generate_c_array(image_file_path):
    image = Image.open(image_file_path)
    bytes = image_to_bytes(image)
    array_name = os.path.splitext(os.path.basename(image_file_path))[0] + "_IMG"
    result = f"static const uint8_t {array_name}[{len(bytes)}] = {{"

    for i in range(len(bytes)):
        if i % 12 == 0:
            result += "\n"
        result += hex_1_byte(bytes[i])
        result += ", "
    
    result += "};"

    return result

def main():
    arg_parser = ArgumentParser(description="""
    This Python script reads the PNG files in provided folder, extracts pixel data
    and creates one C header file which contains a uint8_t array for each image.
    """, formatter_class=RawDescriptionHelpFormatter
    )
    arg_parser.add_argument("--input", "-i", metavar="<path to folder with images>", type=str, required=True)
    arg_parser.add_argument("--output", "-o", metavar="<.h file path>", type=str, required=True)
    args = arg_parser.parse_args()

    result = f""" // AUTOGENERATED FILE. DO NOT EDIT!
#ifndef IMAGES_H
#define IMAGES_H

#include <stdint.h>

"""

    for file in os.listdir(args.input):
        full_path = os.path.join(args.input, file)
        if not os.path.isfile(full_path):
            continue

        result += generate_c_array(full_path) + "\n\n"

    result += "#endif // IMAGES_H"
    
    file_out = open(args.output, "w")
    file_out.write(result)

if __name__ == "__main__":
    main()
